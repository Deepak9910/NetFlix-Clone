{"version":3,"sources":["Nav.js","axios.js","Requests.js","Banner.js","Row.js","screens/HomeScreen.js","firebase.js","screens/SignUpScreen.js","screens/LoginScreen.js","features/userSlice.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","useEffect","addEventListener","removeEventListener","className","onClick","push","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Row","fetchURL","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","SignUpScreen","emailRef","useRef","passwordRef","ref","placeholder","type","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","catch","error","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","exact","store","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9aa245ab.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './Nav.css';\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n    const history = useHistory();\r\n\r\n    const transitionNavBar = () => {\r\n        if (window.scrollY > 100) {\r\n            handleShow(true);\r\n        } else {\r\n            handleShow(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", transitionNavBar);\r\n        return () => window.removeEventListener(\"scroll\", transitionNavBar);\r\n    }, [])\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <div className=\"nav_contents\">\r\n                <img\r\n                    onClick={() => history.push('/')}\r\n                    className=\"nav_logo\"\r\n                    src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n                    alt=\"\"\r\n                />\r\n                <img\r\n                    onClick={() => history.push('/profile')}\r\n                    className=\"nav_avatar\"\r\n                    src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n                    alt=\"\"\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\"\r\n})\r\n\r\nexport default instance","// Typically we Store it in {process.env.API_KEY}\r\n  \r\nconst API_KEY = \"07c118dd2971fd117c22f34e47f097d5\";\r\n\r\nconst requests = {\r\n  fetchTrending: `trending/all/day?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;","import React, { useEffect, useState } from 'react'\r\nimport './Banner.css'\r\nimport axios from './axios';\r\nimport requests from './Requests'\r\n\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\nfunction Banner() {\r\n    const [movie,setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            );\r\n            return request;\r\n        }\r\n        fetchData();\r\n    },[]);\r\n\r\n    console.log(movie);\r\n\r\n    function truncate(string, n) {\r\n        return string?.length > n ? string.substr(0, n - 1) + '...' : string;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\"\r\n            style={{\r\n                backgroundSize: \"cover\",\r\n                backgroundImage: `url('${base_url}${movie?.backdrop_path}')`,\r\n                backgroundPosition: \"center center\",\r\n            }}>\r\n            <div className=\"banner_contents\">\r\n                <h1 className=\"banner_title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">Play</button>\r\n                    <button className=\"banner_button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\r\n            </div>\r\n            <div className=\"banner-fadeButton\" />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react'\r\nimport './Row.css';\r\nimport axios from './axios';\r\n\r\nfunction Row({ title, fetchURL, isLargeRow = false }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchURL);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n\r\n        fetchData();\r\n    }, [fetchURL])\r\n\r\n    console.log(movies);\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row_posters\">\r\n                {movies.map(movie => (\r\n                    ((isLargeRow && movie.poster_path) || (!isLargeRow && movie.backdrop_path)) && (\r\n                        <img\r\n                            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                            key={movie.id}\r\n                            src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                                }`}\r\n                            alt={movie.name}\r\n                        />\r\n                    )\r\n                ))}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;\r\n","import React from 'react';\r\nimport './HomeScreen.css';\r\nimport Nav from '../Nav';\r\nimport Banner from '../Banner';\r\nimport requests from '../Requests'\r\nimport Row from '../Row';\r\n\r\n\r\nfunction HomeScreen() {\r\n    return (\r\n        <div className = \"homeScreen\">\r\n            <Nav />\r\n            <Banner />\r\n            <Row\r\n                title = \"Netflix Originals\"\r\n                fetchURL = {requests.fetchNetflixOriginals}\r\n                isLargeRow \r\n            />\r\n            <Row title = \"Trending Now\" fetchURL = {requests.fetchTrending} />\r\n            <Row title = \"Top Rated\" fetchURL = {requests.fetchTopRated}/>\r\n            <Row title = \"Action Movies\" fetchURL = {requests.fetchActionMovies}/>\r\n            <Row title = \"Comedy Movies\" fetchURL = {requests.fetchComedyMovies}/>\r\n            <Row title = \"Horror Movies\" fetchURL = {requests.fetchHorrorMovies}/>\r\n            <Row title = \"Romance Movies\" fetchURL = {requests.fetchRomanceMovies}/>\r\n            <Row title = \"Documentaries\" fetchURL = {requests.fetchDocumentaries}/>\r\n         </div>\r\n    );\r\n}\r\n\r\nexport default HomeScreen;\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCd6RgfmGk1Blp0dfjwTeT8-YztQEvKOwc\",\r\n  authDomain: \"netflix-clone-16ae4.firebaseapp.com\",\r\n  projectId: \"netflix-clone-16ae4\",\r\n  storageBucket: \"netflix-clone-16ae4.appspot.com\",\r\n  messagingSenderId: \"319114706224\",\r\n  appId: \"1:319114706224:web:4123f0902fc297c8f55cf5\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\n\r\nexport { auth };\r\nexport default db;","import React, { useRef } from 'react'\r\nimport { auth } from '../firebase';\r\nimport './SignUpScreen.css'; \r\n\r\nfunction SignUpScreen() {\r\n\r\n    const emailRef = useRef(null);\r\n    const passwordRef = useRef(null);\r\n\r\n    const register = (e) => {\r\n        e.preventDefault();\r\n\r\n        auth.createUserWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value\r\n        ).then((authUser)=>{\r\n            console.log(authUser);\r\n        }).catch((error)=>{\r\n            alert(error.message);\r\n        });\r\n    }\r\n\r\n    const signIn = (e) => {\r\n        e.preventDefault();\r\n        auth.signInWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value\r\n        ).then((authUser)=>{\r\n            console.log(authUser);\r\n        }).catch((error)=>{\r\n            alert(error.message);\r\n        });\r\n    }\r\n \r\n    return (\r\n        <div className=\"signupScreen\">\r\n            <form>\r\n                <h1>Sign In</h1>\r\n                <input ref={emailRef} placeholder=\"Email\" type=\"email\" />\r\n                <input ref={passwordRef} placeholder=\"Password\" type=\"password\" />\r\n                <button type=\"submit\" onClick={signIn}>Sign In</button>\r\n\r\n                <h4>\r\n                    <span className=\"signupScreen_grey\">New to Netflix ? </span>\r\n                    <span className=\"signupScreen_link\" onClick={register}>Sign Up now.</span>\r\n                </h4>\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUpScreen;\r\n","import React, {useState} from 'react'\r\nimport './LoginScreen.css'\r\nimport SignUpScreen from './SignUpScreen';\r\n\r\nfunction LoginScreen() {\r\n\r\n    const [signIn, setSignIn] = useState(false);\r\n\r\n\r\n    return (\r\n        <div className=\"loginScreen\">\r\n            <div className=\"loginScreen_background\">\r\n                <img\r\n                    className=\"loginScreen_logo\"\r\n                    src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n                    alt=\"\"\r\n                />\r\n                <button onClick={() => setSignIn(true)} className=\"loginScreen_button\">Sign In</button>\r\n                <div className=\"loginScreen_gradient\" />\r\n            </div>\r\n\r\n            <div className=\"loginScreen_body\">\r\n                {signIn ? (\r\n                    <SignUpScreen />\r\n                ) : (\r\n                    <>\r\n                        <h1>Unlimited movies, TV shows and more.</h1>\r\n                        <h2>Watch anywhere.Cancel at any time.</h2>\r\n                        <h3>Ready to watch? Enter your email to create or restart your membership.</h3>\r\n                        <div className=\"loginScreen_input\">\r\n                            <form>\r\n                                <input\r\n                                    type=\"email\"\r\n                                    placeholder=\"Email Address\"\r\n                                />\r\n                                <button onClick={() => setSignIn(true)} className=\"loginScreen_getStarted\">GET STARTED</button>\r\n                            </form>\r\n                        </div>\r\n                    </>\r\n                )}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginScreen;\r\n","import { createSlice } from '@reduxjs/toolkit';\n// import { fetchCount } from './counter/counterAPI';\n\nexport const userSlice = createSlice({\n    name:'user',\n    initialState: {\n        user: null,\n    },\n    reducers: {\n        login: (state,action) => {\n            state.user = action.payload;\n        },\n        logout: (state) => {\n            state.user = null;\n        }\n    },\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport { auth } from '../firebase';\r\nimport Nav from '../Nav';\r\nimport './ProfileScreen.css';\r\nfunction ProfileScreen() {\r\n    const user = useSelector(selectUser);\r\n    return (\r\n        <div className=\"profileScreen\">\r\n            <Nav />\r\n            <div className=\"profileScreen_body\">\r\n                <h1>Edit Profile</h1>\r\n                <div className=\"profileScreen_info\">\r\n                    <img src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" alt=\"\" />\r\n                    <div className=\"profileScreen_detail\">\r\n                        <h2>{user.email}</h2>\r\n                        <div className=\"profileScreen_plans\">\r\n                                <h3>Plans</h3>\r\n                            <button\r\n                                onClick={() => auth.signOut()}\r\n                                className=\"profileScreen_signOut\"\r\n                            >\r\n                                Sign Out\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen;\r\n","import React, { useEffect } from 'react';\nimport HomeScreen from './screens/HomeScreen';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport LoginScreen from './screens/LoginScreen';\nimport { auth } from './firebase';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { login, logout, selectUser } from './features/userSlice';\nimport ProfileScreen from './screens/ProfileScreen';\n\nfunction App() {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      if(userAuth) {\n        //Logged In\n        console.log(userAuth);\n        dispatch(login({\n          uid: userAuth.uid,\n          email: userAuth.email,\n        }))\n      } else {\n        // Logged Out\n        dispatch(logout());\n      }\n    });\n    return unsubscribe;\n  }, [dispatch]);\n\n  return (\n    <div className=\"app\">\n      <Router>\n        {!user ? (\n          <LoginScreen />) : (\n          <Switch>\n            <Route path=\"/profile\">\n              <ProfileScreen />\n            </Route>\n            <Route exact path=\"/\">\n              <HomeScreen />\n            </Route>\n          </Switch>\n        )\n        }\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}